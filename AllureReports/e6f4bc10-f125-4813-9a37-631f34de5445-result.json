{"name": "test_person_filter_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B0AE1F52+60322]\n\t(No symbol) [0x00007FF6B0A5CEC9]\n\t(No symbol) [0x00007FF6B0917CE9]\n\t(No symbol) [0x00007FF6B09689C2]\n\t(No symbol) [0x00007FF6B095B491]\n\t(No symbol) [0x00007FF6B098C21A]\n\t(No symbol) [0x00007FF6B095ADB6]\n\t(No symbol) [0x00007FF6B098C430]\n\t(No symbol) [0x00007FF6B09ABC80]\n\t(No symbol) [0x00007FF6B098BFC3]\n\t(No symbol) [0x00007FF6B0959617]\n\t(No symbol) [0x00007FF6B095A211]\n\tGetHandleVerifier [0x00007FF6B0DF94AD+3301629]\n\tGetHandleVerifier [0x00007FF6B0E436D3+3605283]\n\tGetHandleVerifier [0x00007FF6B0E39450+3563680]\n\tGetHandleVerifier [0x00007FF6B0B94326+790390]\n\t(No symbol) [0x00007FF6B0A6750F]\n\t(No symbol) [0x00007FF6B0A63404]\n\t(No symbol) [0x00007FF6B0A63592]\n\t(No symbol) [0x00007FF6B0A52F9F]\n\tBaseThreadInitThunk [0x00007FFDA3E47344+20]\n\tRtlUserThreadStart [0x00007FFDA57A26B1+33]", "trace": "self = <testCases.test_Person_03.Test_pinx object at 0x000002AA820514D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fb421f49359dcfd321d9fee289da2191\")>\n\n    def test_person_filter_001(self, setup):\n        self.log.info(\"Testcase test_user_login_002 is started\")\n        self.log.info(\"Opening browser\")\n        self.driver = setup\n        self.lg = Login_Class(self.driver)\n        self.lp = Class_Leads(self.driver)\n        self.driver.implicitly_wait(20)\n        self.log.info(\"Click On login Link\")\n        self.log.info(\"Enter Email\" + self.Email)\n        self.lg.Enter_Email(self.Email)\n        self.log.info(\"Enter Password\" + self.Password)\n        self.lg.Enter_Password(self.Password)\n        self.log.info(\"Click Login Button\")\n        self.lg.Click_Login_Button()\n>       self.lp.Leads_Click()\n\ntestCases\\test_Person_03.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\Leads_Page.py:17: in Leads_Click\n    self.driver.find_element(*Class_Leads.Text_Leads_Click).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002AA8210A490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF6B0A52F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDA3E47344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFDA57A26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B0AE1F52+60322]\nE       \t(No symbol) [0x00007FF6B0A5CEC9]\nE       \t(No symbol) [0x00007FF6B0917CE9]\nE       \t(No symbol) [0x00007FF6B09689C2]\nE       \t(No symbol) [0x00007FF6B095B491]\nE       \t(No symbol) [0x00007FF6B098C21A]\nE       \t(No symbol) [0x00007FF6B095ADB6]\nE       \t(No symbol) [0x00007FF6B098C430]\nE       \t(No symbol) [0x00007FF6B09ABC80]\nE       \t(No symbol) [0x00007FF6B098BFC3]\nE       \t(No symbol) [0x00007FF6B0959617]\nE       \t(No symbol) [0x00007FF6B095A211]\nE       \tGetHandleVerifier [0x00007FF6B0DF94AD+3301629]\nE       \tGetHandleVerifier [0x00007FF6B0E436D3+3605283]\nE       \tGetHandleVerifier [0x00007FF6B0E39450+3563680]\nE       \tGetHandleVerifier [0x00007FF6B0B94326+790390]\nE       \t(No symbol) [0x00007FF6B0A6750F]\nE       \t(No symbol) [0x00007FF6B0A63404]\nE       \t(No symbol) [0x00007FF6B0A63592]\nE       \t(No symbol) [0x00007FF6B0A52F9F]\nE       \tBaseThreadInitThunk [0x00007FFDA3E47344+20]\nE       \tRtlUserThreadStart [0x00007FFDA57A26B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "c7e0b1bc-21c7-4b0f-8f55-51ef4b6a6d39-attachment.txt", "type": "text/plain"}], "start": 1717823606503, "stop": 1717823630207, "uuid": "0067da76-a84d-4643-aa5f-0dd5fe927d6e", "historyId": "9c1397c8f25a0844fc6b173fbff84853", "testCaseId": "9c1397c8f25a0844fc6b173fbff84853", "fullName": "testCases.test_Person_03.Test_pinx#test_person_filter_001", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Person_03"}, {"name": "subSuite", "value": "Test_pinx"}, {"name": "host", "value": "NETWORK-WORLD"}, {"name": "thread", "value": "7084-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Person_03"}]}